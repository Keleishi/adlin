---

- name: Install NGINX, Certbot
  apt:
    name:
      - nginx
      - python3-certbot-nginx
      - ca-certificates
    update_cache: yes

- name: Create site root directories
  file:
    path: "{{ web_root }}/{{ item.name }}.{{ domain_suffix }}"
    state: directory
    recurse: yes
  loop: "{{ sites }}"

- name: Get ACME root certificate JSON (accept 201)
  uri:
    url: https://acme.srs.adlin:9000/roots
    method: GET
    return_content: yes
    validate_certs: no
    status_code: [200, 201]
    body_format: json
  register: ca_response

- name: Extract certificate from JSON response
  set_fact:
    ca_certificate: "{{ ca_response.json.crts[0] }}"

- name: Write CA certificate to file
  copy:
    content: "{{ ca_certificate }}"
    dest: /usr/local/share/ca-certificates/acme-root.crt
    mode: '0644'

- name: Update CA trust store (system-wide)
  command: update-ca-certificates
  register: ca_update
  changed_when: "'added' in ca_update.stdout or 'done' in ca_update.stdout"


- name: Ensure the certificate is in the correct format
  shell: |
    if ! grep -q "BEGIN CERTIFICATE" /usr/local/share/ca-certificates/acme-root.crt; then
      echo "ERROR: Invalid certificate format"; exit 1
    fi
  args:
    executable: /bin/bash

- name: Update CA trust store (system-wide)
  command: update-ca-certificates
  register: ca_update
  changed_when: "'added' in ca_update.stdout or 'done' in ca_update.stdout"

- name: Copy index pages and cat image
  copy:
    src: "{{ item }}"
    dest: "{{ web_root }}/{{ (item | basename | regex_replace('index_|\\.html|\\.jpg', '')) }}.{{ domain_suffix }}/{{ item | basename }}"
  with_fileglob:
    - "{{ role_path }}/files/index_*.html"
    - "{{ role_path }}/files/ilovecats.html"
    - "{{ role_path }}/files/chat.jpg"

# PHASE 1: config HTTP temporaire
- name: Create temporary HTTP-only nginx config
  template:
    src: site_http.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.name }}.{{ domain_suffix }}"
  loop: "{{ sites }}"
  notify: Restart nginx

- name: Enable HTTP-only nginx sites
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}.{{ domain_suffix }}"
    dest: "/etc/nginx/sites-enabled/{{ item.name }}.{{ domain_suffix }}"
    state: link
    force: true
  loop: "{{ sites }}"
  notify: Restart nginx

- name: Obtain SSL certificate for supervision
  command: >
    certbot certonly
    --nginx
    --non-interactive
    --agree-tos
    --email {{ email }}
    --server {{ acme_server }}
    --domains supervision.{{ domain_suffix }}
    --keep-until-expiring
  register: certbot_supervision_result
  failed_when: certbot_supervision_result.rc != 0 and "Certificate not yet due for renewal" not in certbot_supervision_result.stderr

# config HTTPS finale
- name: Overwrite nginx config with HTTPS+redirect
  template:
    src: site_https.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.name }}.{{ domain_suffix }}"
  loop: "{{ sites }}"
  notify: Restart nginx
