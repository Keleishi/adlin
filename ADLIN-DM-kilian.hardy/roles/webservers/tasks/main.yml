---

- name: Install NGINX, Certbot
  apt:
    name: "{{ required_packages }}"
    state: present
    update_cache: yes

- name: Create site root directories
  file:
    path: "{{ web_root }}/{{ item.name }}"
    state: directory
    recurse: yes
  loop: "{{ sites }}"

- name: Create ACME challenge directory
  file:
    path: "{{ web_root }}/.well-known/acme-challenge"
    state: directory
    recurse: yes

- name: Get ACME root certificate JSON (accept 201)
  uri:
    url: https://acme.srs.adlin:9000/roots
    method: GET
    return_content: yes
    validate_certs: no
    status_code: [200, 201]
    body_format: json
  register: ca_response

- name: Extract certificate from JSON response
  set_fact:
    ca_certificate: "{{ ca_response.json.crts[0] }}"

- name: Write CA certificate to file
  copy:
    content: "{{ ca_certificate }}"
    dest: /usr/local/share/ca-certificates/acme-root.crt
    owner: root
    group: root
    mode: '0644'

- name: Ensure the certificate is in the correct format
  shell: |
    if ! grep -q "BEGIN CERTIFICATE" /usr/local/share/ca-certificates/acme-root.crt; then
      echo "ERROR: Invalid certificate format"; exit 1
    fi
  args:
    executable: /bin/bash

- name: Update CA trust store (system-wide)
  command: update-ca-certificates
  register: ca_update
  changed_when: "'added' in ca_update.stdout or 'done' in ca_update.stdout"

- name: Remove default nginx site
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: Restart nginx

- name: Copy index pages
  copy:
    src: "{{ item }}"
    dest: "{{ web_root }}/{{ (item | basename | regex_replace('index_|\\.html', '')) }}.{{ domain_suffix }}/{{ item | basename }}"
  with_fileglob:
    - "{{ role_path }}/files/index_*.html"
    - "{{ role_path }}/files/ilovecats.html"

- name: Copy cat.jpg only for ilovecats site
  copy:
    src: "{{ role_path }}/files/cat.jpg"
    dest: "{{ web_root }}/ilovecats.{{ domain_suffix }}/cat.jpg"

- name: Remove old configs for sites
  file:
    path: "/etc/nginx/sites-enabled/{{ item.name }}.conf"
    state: absent
  loop: "{{ sites }}"

# PHASE 1: config HTTP temporaire
- name: Create temporary HTTP-only nginx config
  template:
    src: site_http.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.name }}.conf"
  loop: "{{ sites }}"
  notify: Restart nginx

- name: Enable HTTP-only nginx sites
  file:
    src: "/etc/nginx/sites-available/{{ item.name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ item.name }}.conf"
    state: link
    force: true
  loop: "{{ sites }}"
  notify: Restart nginx

- name: Ensure ufw is installed
  apt:
    name: ufw
    state: present
    update_cache: yes

- name: Allow SSH
  ufw:
    rule: allow
    port: '22'
    proto: tcp

- name: Allow HTTP
  ufw:
    rule: allow
    port: '80'
    proto: tcp

- name: Allow HTTPS
  ufw:
    rule: allow
    port: '443'
    proto: tcp

- name: Allow outgoing DNS (UDP)
  ufw:
    rule: allow
    direction: out
    port: '53'
    proto: udp

- name: Allow outgoing DNS (TCP)
  ufw:
    rule: allow
    direction: out
    port: '53'
    proto: tcp

- name: Enable UFW
  ufw:
    state: enabled
    policy: allow

- name: Start and enable nginx
  systemd:
    name: nginx
    state: started
    enabled: yes

- name: Wait for nginx to be ready
  wait_for:
    port: 80
    host: localhost
    delay: 5

# OBTENTION DES CERTIFICATS
- name: Obtain SSL certificates
  command: >
    certbot certonly
    --nginx
    --non-interactive
    --agree-tos
    --email {{ email }}
    --server {{ acme_server }}
    --domains {{ item.name }}.{{ domain_suffix }}
    --keep-until-expiring
  loop: "{{ sites }}"
  register: certbot_result
  failed_when: certbot_result.rc != 0 and "Certificate not yet due for renewal" not in certbot_result.stderr
  notify: Restart nginx

# PHASE 2: config HTTPS finale
- name: Overwrite nginx config with HTTPS+redirect
  template:
    src: site_https.conf.j2
    dest: "/etc/nginx/sites-available/{{ item.name }}.conf"
  loop: "{{ sites }}"
  notify: Restart nginx

- name: Setup automatic certificate renewal
  cron:
    name: "Certbot renewal"
    minute: "{{ certbot_auto_renew_minute }}"
    hour: "{{ certbot_auto_renew_hour }}"
    job: "certbot renew --quiet --nginx"
    user: root
  when: certbot_auto_renew
